package fr.flegac.jstory.stories.publication.web_site;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.assertj.core.api.Assertions;
import org.junit.Test;
import fr.flegac.jstory.annotations.Epic;
import fr.flegac.jstory.annotations.Step;
import fr.flegac.jstory.annotations.Story;
import fr.flegac.jstory.parser.CodeStoryParser;
import fr.flegac.jstory.parser.JarStoryParser;
import fr.flegac.jstory.parser.StoryParser;
import fr.flegac.jstory.parser.XmlStoryParser;
import fr.flegac.jstory.parser.model.PublicationDTO;
import fr.flegac.jstory.publisher.web.WebPublisher;
import fr.flegac.jstory.publisher.web.WebTemplate;
import fr.flegac.jstory.utils.Utils;

@Epic(why = "publish structured specifications from source code",
      who = "publisher",
      what = "run a programm and get a structured web site containing all specifications")
public class WebSitePublication {

  private static final Path WORKSPACE = Paths.get(System.getProperty("user.dir"));
  private static final Path WEB_TEMPLATE = WORKSPACE.resolve("src/main/resources/web-template");
  private static final Path outputSource = WORKSPACE.resolve("target/output/source");
  private static final Path outputJar = WORKSPACE.resolve("target/output/jar");
  private static final Path outputXml = WORKSPACE.resolve("target/output/xml");

  private static final Path JAR_PATH = WORKSPACE.resolve("src/test/java/jstory-doc-0.0.1-SNAPSHOT.jar");
  private static final String INDEX_HTML = "index.html";
  private static final String STORIES_PACKAGE = "fr.flegac.jstory.stories";
  private static final String PUBLICATION_TITLE = "Autogenerated User Stories of the JStory project";

  @Story(why = "link stories to test scenario",
         who = "publisher",
         what = "link each story and each test scenario to the class or method where it is defined")
  @Step(given = "A jar file with code annoted by JStory",
        when = "Run the publication process",
        then = "the documentation has been generated")
  @Step(when = "Navigate the generated documentation to find a story",
        then = "the story is associated to a test scenario")
  public void eachStoryShouldBeLinkedToASpecificJavaClassOrMethod() {

  }

  @Test
  @Story(why = "generate specifications from source code",
         who = "developper",
         what = "parse source code containing specifications and generate a web site from it")
  @Story(why = "verify that 2 @Story annotations can be on the same test method",
         who = "developper",
         what = "assign multiple @Story annotations to a single test method")
  public void publishFromCode() throws Exception {
    publish(new CodeStoryParser(PUBLICATION_TITLE, STORIES_PACKAGE), outputSource);
  }

  @Test
  @Story(why = "generate specifications from jar file",
         who = "developper",
         what = "parse a given jar file containing java code with specifications and genrate a web site wfrom it")
  public void publishFromJar() throws Exception {
    publish(new JarStoryParser(PUBLICATION_TITLE, STORIES_PACKAGE, JAR_PATH), outputJar);
  }

  @Test
  @Story(why = "generate specifications from xml file",
         who = "developper",
         what = "parse xml file containing specifications and generate a web site from it")
  public void publishFromXml() throws Exception {
    final Path xmlPath = WORKSPACE.resolve("src/test/java/publication.xml");
    System.out.println(xmlPath);
    publish(new XmlStoryParser(xmlPath.toFile()), outputXml);
  }

  private void publish(final StoryParser parser, final Path output) throws IOException {
    final PublicationDTO publication = parser.getPublication();

    if (parser instanceof XmlStoryParser) {
      Utils.print(publication, System.out);
    } else {

      Utils.print(publication, System.out);
    }

    final WebTemplate template = new WebTemplate(WEB_TEMPLATE);
    final WebPublisher publisher = new WebPublisher(template);
    publisher.publish(publication, output);
    System.out.println(output);
    Assertions.assertThat(output).exists();
    Assertions.assertThat(output.resolve(INDEX_HTML)).exists();
  }
}
